import { effect, inject, Injectable, runInInjectionContext, signal, untracked, } from '@angular/core';
import { toSignal } from '@angular/core/rxjs-interop';
import { ActivatedRoute, Router, } from '@angular/router';
import { assertInjector } from 'ngxtension/assert-injector';
import { createNotifier } from 'ngxtension/create-notifier';
import { distinctUntilKeyChanged, map } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * Service to coalesce multiple navigation calls into a single navigation event.
 */
export class LinkedQueryParamGlobalHandler {
    constructor() {
        this._router = inject(Router);
        /**
         * @internal
         * The current query params that will be set on the next navigation event.
         */
        this._currentKeys = {};
        /**
         * @internal
         * The navigation extras that will be used on the next navigation event.
         */
        this._navigationExtras = {};
        /**
         * @internal
         * The notifier that will be used to schedule the navigation event.
         */
        this._schedulerNotifier = createNotifier();
        effect(() => {
            // listen to the scheduler notifier to schedule the navigation event
            this._schedulerNotifier.listen();
            // we need to untrack the navigation call in order to not register any other signal as a dependency
            untracked(() => void this.navigate());
        });
    }
    /**
     * Schedules the navigation event.
     */
    scheduleNavigation() {
        this._schedulerNotifier.notify();
    }
    /**
     * Sets the value of a query param.
     * This will be used on the next navigation event.
     */
    setParamKeyValue(key, value) {
        this._currentKeys[key] = value;
    }
    /**
     * Sets the navigation extras that will be used on the next navigation event.
     */
    setCurrentNavigationExtras(config = {}) {
        const { queryParamsHandling, onSameUrlNavigation, replaceUrl, skipLocationChange, } = config;
        if (queryParamsHandling || queryParamsHandling === '') {
            this._navigationExtras.queryParamsHandling = queryParamsHandling;
        }
        if (onSameUrlNavigation) {
            this._navigationExtras.onSameUrlNavigation = onSameUrlNavigation;
        }
        if (replaceUrl) {
            this._navigationExtras.replaceUrl = replaceUrl;
        }
        if (skipLocationChange) {
            this._navigationExtras.skipLocationChange = skipLocationChange;
        }
    }
    /**
     * Navigates to the current URL with the accumulated query parameters and navigation extras.
     * Cleans up the current keys and navigation extras after the navigation.
     */
    navigate() {
        return this._router
            .navigate([], {
            queryParams: this._currentKeys,
            queryParamsHandling: 'merge', // can be overridden by the `queryParamsHandling` option
            ...this._navigationExtras, // override the navigation extras
        })
            .then((value) => {
            // we reset the current keys and navigation extras on navigation
            // in order to avoid leaking to other navigations
            this._currentKeys = {};
            this._navigationExtras = {};
            return value;
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.7", ngImport: i0, type: LinkedQueryParamGlobalHandler, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.7", ngImport: i0, type: LinkedQueryParamGlobalHandler, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.7", ngImport: i0, type: LinkedQueryParamGlobalHandler, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [] });
export function linkedQueryParam(key, options) {
    if (options?.defaultValue !== undefined && options?.parse) {
        throw new Error('linkedQueryParam: You cannot have both defaultValue and parse at the same time!');
    }
    const injector = assertInjector(linkedQueryParam, options?.injector);
    return runInInjectionContext(injector, () => {
        const route = inject(ActivatedRoute);
        const globalHandler = inject(LinkedQueryParamGlobalHandler);
        /**
         * Parses a parameter value based on provided configuration.
         * @param params - An object containing parameters.
         * @returns The parsed parameter value.
         */
        const parseParamValue = (params) => {
            // Get the value from the params object.
            const value = params[key] ?? null;
            // If a parsing function is provided in the config, use it to parse the value.
            if (options?.parse) {
                return options.parse(value);
            }
            // If the value is undefined or null and a default value is provided, return the default value.
            if ((value === undefined || value === null) &&
                options?.defaultValue !== undefined) {
                return options.defaultValue;
            }
            // Otherwise, return the original value or the parsed value (if it was parsed).
            return value;
        };
        // create a signal that is updated whenever the query param changes
        const queryParamValue = toSignal(route.queryParams.pipe(distinctUntilKeyChanged(key), // skip if no changes on same key
        map((x) => parseParamValue(x))), { initialValue: parseParamValue(route.snapshot.queryParams) });
        const source = signal(queryParamValue());
        const originalSet = source.set;
        effect(() => {
            const x = queryParamValue();
            // update the source signal whenever the query param changes
            untracked(() => originalSet(x));
        });
        const set = (value) => {
            // we first set the initial value so it synchronous (same as a normal signal)
            originalSet(value);
            // when the source signal changes, update the query param
            // store the new value in the current keys so that we can coalesce the navigation
            let valueToBeSet = value;
            if (options?.stringify) {
                valueToBeSet = options.stringify(value);
            }
            else if (value === undefined || value === null) {
                valueToBeSet = null;
            }
            else {
                valueToBeSet = typeof value === 'string' ? value : String(value);
            }
            globalHandler.setParamKeyValue(key, valueToBeSet);
            globalHandler.setCurrentNavigationExtras(options ?? {});
            // schedule the navigation event (multiple synchronous navigations will be coalesced)
            // this will also reset the current keys and navigation extras after the navigation
            globalHandler.scheduleNavigation();
        };
        const update = (fn) => set(fn(source()));
        return Object.assign(source, { set, update });
    });
}
export function paramToNumber(config = { defaultValue: null }) {
    return (x) => {
        if (x === undefined || x === null)
            return config.defaultValue;
        const parsed = parseInt(x, 10);
        if (Number.isNaN(parsed))
            return config.defaultValue;
        return parsed;
    };
}
export function paramToBoolean(config = {
    defaultValue: null,
}) {
    return (x) => x === undefined || x === null ? config.defaultValue : x === 'true';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlua2VkLXF1ZXJ5LXBhcmFtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy9uZ3h0ZW5zaW9uL2xpbmtlZC1xdWVyeS1wYXJhbS9zcmMvbGlua2VkLXF1ZXJ5LXBhcmFtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTixNQUFNLEVBQ04sTUFBTSxFQUNOLFVBQVUsRUFFVixxQkFBcUIsRUFDckIsTUFBTSxFQUNOLFNBQVMsR0FFVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDdEQsT0FBTyxFQUNOLGNBQWMsRUFHZCxNQUFNLEdBQ04sTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzVELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxHQUFHLEVBQUUsTUFBTSxNQUFNLENBQUM7O0FBb0JwRDs7R0FFRztBQUVILE1BQU0sT0FBTyw2QkFBNkI7SUFrQnpDO1FBakJRLFlBQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDakM7OztXQUdHO1FBQ0ssaUJBQVksR0FBd0MsRUFBRSxDQUFDO1FBQy9EOzs7V0FHRztRQUNLLHNCQUFpQixHQUFxQixFQUFFLENBQUM7UUFDakQ7OztXQUdHO1FBQ0ssdUJBQWtCLEdBQUcsY0FBYyxFQUFFLENBQUM7UUFHN0MsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUNYLG9FQUFvRTtZQUNwRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxFQUFFLENBQUM7WUFFakMsbUdBQW1HO1lBQ25HLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FB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LE1BQU0sQ0FBQztJQUNmLENBQUMsQ0FBQztBQUNILENBQUM7QUF5QkQsTUFBTSxVQUFVLGNBQWMsQ0FDN0IsU0FBd0Q7SUFDdkQsWUFBWSxFQUFFLElBQUk7Q0FDbEI7SUFFRCxPQUFPLENBQUMsQ0FBZ0IsRUFBRSxFQUFFLENBQzNCLENBQUMsS0FBSyxTQUFTLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLE1BQU0sQ0FBQztBQUNyRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcblx0ZWZmZWN0LFxuXHRpbmplY3QsXG5cdEluamVjdGFibGUsXG5cdEluamVjdG9yLFxuXHRydW5JbkluamVjdGlvbkNvbnRleHQsXG5cdHNpZ25hbCxcblx0dW50cmFja2VkLFxuXHRXcml0YWJsZVNpZ25hbCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyB0b1NpZ25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvcnhqcy1pbnRlcm9wJztcbmltcG9ydCB7XG5cdEFjdGl2YXRlZFJvdXRlLFxuXHROYXZpZ2F0aW9uRXh0cmFzLFxuXHRQYXJhbXMsXG5cdFJvdXRlcixcbn0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IGFzc2VydEluamVjdG9yIH0gZnJvbSAnbmd4dGVuc2lvbi9hc3NlcnQtaW5qZWN0b3InO1xuaW1wb3J0IHsgY3JlYXRlTm90aWZpZXIgfSBmcm9tICduZ3h0ZW5zaW9uL2NyZWF0ZS1ub3RpZmllcic7XG5pbXBvcnQgeyBkaXN0aW5jdFVudGlsS2V5Q2hhbmdlZCwgbWFwIH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogVGhlIHR5cGUgb2YgdGhlIHN0cmluZ2lmaWVkIHZhbHVlLlxuICogQWZ0ZXIgdHJhbnNmb3JtaW5nIHRoZSB2YWx1ZSBiZWZvcmUgaXQgaXMgcGFzc2VkIHRvIHRoZSBxdWVyeSBwYXJhbSwgdGhpcyB0eXBlIHdpbGwgYmUgdXNlZC5cbiAqL1xudHlwZSBTdHJpbmdpZnlSZXR1cm5UeXBlID0gc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlc2UgYXJlIHRoZSBvcHRpb25zIHRoYXQgY2FuIGJlIHBhc3NlZCB0byB0aGUgYGxpbmtlZFF1ZXJ5UGFyYW1gIGZ1bmN0aW9uLlxuICogVGhleSBhcmUgdGFrZW4gZnJvbSB0aGUgYE5hdmlnYXRpb25FeHRyYXNgIHR5cGUgaW4gdGhlIGBAYW5ndWxhci9yb3V0ZXJgIHBhY2thZ2UuXG4gKi9cbnR5cGUgTmF2aWdhdGVNZXRob2RGaWVsZHMgPSBQaWNrPFxuXHROYXZpZ2F0aW9uRXh0cmFzLFxuXHR8ICdxdWVyeVBhcmFtc0hhbmRsaW5nJ1xuXHR8ICdvblNhbWVVcmxOYXZpZ2F0aW9uJ1xuXHR8ICdyZXBsYWNlVXJsJ1xuXHR8ICdza2lwTG9jYXRpb25DaGFuZ2UnXG4+O1xuXG4vKipcbiAqIFNlcnZpY2UgdG8gY29hbGVzY2UgbXVsdGlwbGUgbmF2aWdhdGlvbiBjYWxscyBpbnRvIGEgc2luZ2xlIG5hdmlnYXRpb24gZXZlbnQuXG4gKi9cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgTGlua2VkUXVlcnlQYXJhbUdsb2JhbEhhbmRsZXIge1xuXHRwcml2YXRlIF9yb3V0ZXIgPSBpbmplY3QoUm91dGVyKTtcblx0LyoqXG5cdCAqIEBpbnRlcm5hbFxuXHQgKiBUaGUgY3VycmVudCBxdWVyeSBwYXJhbXMgdGhhdCB3aWxsIGJlIHNldCBvbiB0aGUgbmV4dCBuYXZpZ2F0aW9uIGV2ZW50LlxuXHQgKi9cblx0cHJpdmF0ZSBfY3VycmVudEtleXM6IFJlY29yZDxzdHJpbmcsIFN0cmluZ2lmeVJldHVyblR5cGU+ID0ge307XG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICogVGhlIG5hdmlnYXRpb24gZXh0cmFzIHRoYXQgd2lsbCBiZSB1c2VkIG9uIHRoZSBuZXh0IG5hdmlnYXRpb24gZXZlbnQuXG5cdCAqL1xuXHRwcml2YXRlIF9uYXZpZ2F0aW9uRXh0cmFzOiBOYXZpZ2F0aW9uRXh0cmFzID0ge307XG5cdC8qKlxuXHQgKiBAaW50ZXJuYWxcblx0ICogVGhlIG5vdGlmaWVyIHRoYXQgd2lsbCBiZSB1c2VkIHRvIHNjaGVkdWxlIHRoZSBuYXZpZ2F0aW9uIGV2ZW50LlxuXHQgKi9cblx0cHJpdmF0ZSBfc2NoZWR1bGVyTm90aWZpZXIgPSBjcmVhdGVOb3RpZmllcigpO1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdGVmZmVjdCgoKSA9PiB7XG5cdFx0XHQvLyBsaXN0ZW4gdG8gdGhlIHNjaGVkdWxlciBub3RpZmllciB0byBzY2hlZHVsZSB0aGUgbmF2aWdhdGlvbiBldmVudFxuXHRcdFx0dGhpcy5fc2NoZWR1bGVyTm90aWZpZXIubGlzdGVuKCk7XG5cblx0XHRcdC8vIHdlIG5lZWQgdG8gdW50cmFjayB0aGUgbmF2aWdhdGlvbiBjYWxsIGluIG9yZGVyIHRvIG5vdCByZWdpc3RlciBhbnkgb3RoZXIgc2lnbmFsIGFzIGEgZGVwZW5kZW5jeVxuXHRcdFx0dW50cmFja2VkKCgpID0+IHZvaWQgdGhpcy5uYXZpZ2F0ZSgpKTtcblx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTY2hlZHVsZXMgdGhlIG5hdmlnYXRpb24gZXZlbnQuXG5cdCAqL1xuXHRzY2hlZHVsZU5hdmlnYXRpb24oKSB7XG5cdFx0dGhpcy5fc2NoZWR1bGVyTm90aWZpZXIubm90aWZ5KCk7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgdmFsdWUgb2YgYSBxdWVyeSBwYXJhbS5cblx0ICogVGhpcyB3aWxsIGJlIHVzZWQgb24gdGhlIG5leHQgbmF2aWdhdGlvbiBldmVudC5cblx0ICovXG5cdHNldFBhcmFtS2V5VmFsdWUoa2V5OiBzdHJpbmcsIHZhbHVlOiBTdHJpbmdpZnlSZXR1cm5UeXBlKSB7XG5cdFx0dGhpcy5fY3VycmVudEtleXNba2V5XSA9IHZhbHVlO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgdGhlIG5hdmlnYXRpb24gZXh0cmFzIHRoYXQgd2lsbCBiZSB1c2VkIG9uIHRoZSBuZXh0IG5hdmlnYXRpb24gZXZlbnQuXG5cdCAqL1xuXHRzZXRDdXJyZW50TmF2aWdhdGlvbkV4dHJhcyhjb25maWc6IFBhcnRpYWw8TmF2aWdhdGVNZXRob2RGaWVsZHM+ID0ge30pIHtcblx0XHRjb25zdCB7XG5cdFx0XHRxdWVyeVBhcmFtc0hhbmRsaW5nLFxuXHRcdFx0b25TYW1lVXJsTmF2aWdhdGlvbixcblx0XHRcdHJlcGxhY2VVcmwsXG5cdFx0XHRza2lwTG9jYXRpb25DaGFuZ2UsXG5cdFx0fSA9IGNvbmZpZztcblx0XHRpZiAocXVlcnlQYXJhbXNIYW5kbGluZyB8fCBxdWVyeVBhcmFtc0hhbmRsaW5nID09PSAnJykge1xuXHRcdFx0dGhpcy5fbmF2aWdhdGlvbkV4dHJhcy5xdWVyeVBhcmFtc0hhbmRsaW5nID0gcXVlcnlQYXJhbXNIYW5kbGluZztcblx0XHR9XG5cdFx0aWYgKG9uU2FtZVVybE5hdmlnYXRpb24pIHtcblx0XHRcdHRoaXMuX25hdmlnYXRpb25FeHRyYXMub25TYW1lVXJsTmF2aWdhdGlvbiA9IG9uU2FtZVVybE5hdmlnYXRpb247XG5cdFx0fVxuXHRcdGlmIChyZXBsYWNlVXJsKSB7XG5cdFx0XHR0aGlzLl9uYXZpZ2F0aW9uRXh0cmFzLnJlcGxhY2VVcmwgPSByZXBsYWNlVXJsO1xuXHRcdH1cblx0XHRpZiAoc2tpcExvY2F0aW9uQ2hhbmdlKSB7XG5cdFx0XHR0aGlzLl9uYXZpZ2F0aW9uRXh0cmFzLnNraXBMb2NhdGlvbkNoYW5nZSA9IHNraXBMb2NhdGlvbkNoYW5nZTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogTmF2aWdhdGVzIHRvIHRoZSBjdXJyZW50IFVSTCB3aXRoIHRoZSBhY2N1bXVsYXRlZCBxdWVyeSBwYXJhbWV0ZXJzIGFuZCBuYXZpZ2F0aW9uIGV4dHJhcy5cblx0ICogQ2xlYW5zIHVwIHRoZSBjdXJyZW50IGtleXMgYW5kIG5hdmlnYXRpb24gZXh0cmFzIGFmdGVyIHRoZSBuYXZpZ2F0aW9uLlxuXHQgKi9cblx0cHJpdmF0ZSBuYXZpZ2F0ZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcblx0XHRyZXR1cm4gdGhpcy5fcm91dGVyXG5cdFx0XHQubmF2aWdhdGUoW10sIHtcblx0XHRcdFx0cXVlcnlQYXJhbXM6IHRoaXMuX2N1cnJlbnRLZXlzLFxuXHRcdFx0XHRxdWVyeVBhcmFtc0hhbmRsaW5nOiAnbWVyZ2UnLCAvLyBjYW4gYmUgb3ZlcnJpZGRlbiBieSB0aGUgYHF1ZXJ5UGFyYW1zSGFuZGxpbmdgIG9wdGlvblxuXHRcdFx0XHQuLi50aGlzLl9uYXZpZ2F0aW9uRXh0cmFzLCAvLyBvdmVycmlkZSB0aGUgbmF2aWdhdGlvbiBleHRyYXNcblx0XHRcdH0pXG5cdFx0XHQudGhlbigodmFsdWUpID0+IHtcblx0XHRcdFx0Ly8gd2UgcmVzZXQgdGhlIGN1cnJlbnQga2V5cyBhbmQgbmF2aWdhdGlvbiBleHRyYXMgb24gbmF2aWdhdGlvblxuXHRcdFx0XHQvLyBpbiBvcmRlciB0byBhdm9pZCBsZWFraW5nIHRvIG90aGVyIG5hdmlnYXRpb25zXG5cdFx0XHRcdHRoaXMuX2N1cnJlbnRLZXlzID0ge307XG5cdFx0XHRcdHRoaXMuX25hdmlnYXRpb25FeHRyYXMgPSB7fTtcblx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0fSk7XG5cdH1cbn1cblxudHlwZSBMaW5rZWRRdWVyeVBhcmFtT3B0aW9ucyA9IHtcblx0LyoqXG5cdCAqIFRoZSBpbmplY3RvciB0byB1c2UgdG8gaW5qZWN0IHRoZSByb3V0ZXIgYW5kIGFjdGl2YXRlZCByb3V0ZS5cblx0ICovXG5cdGluamVjdG9yPzogSW5qZWN0b3I7XG59ICYgUGFydGlhbDxOYXZpZ2F0ZU1ldGhvZEZpZWxkcz47XG5cbi8qKlxuICogVGhlc2UgYXJlIHRoZSBmdW5jdGlvbiB0eXBlcyB0aGF0IHdpbGwgYmUgdXNlZCB0byBwYXJzZSBhbmQgc3RyaW5naWZ5IHRoZSBxdWVyeSBwYXJhbSB2YWx1ZS5cbiAqL1xudHlwZSBQYXJzZUZuPFQ+ID0gKHZhbHVlOiBzdHJpbmcgfCBudWxsKSA9PiBUO1xudHlwZSBTdHJpbmdpZnlGbjxUPiA9ICh2YWx1ZTogVCkgPT4gU3RyaW5naWZ5UmV0dXJuVHlwZTtcblxuLyoqXG4gKlRoZXNlIHR5cGVzIHdpbGwgYmUgdXNlZCB0byBkZWZpbmUgdGhlIHJldHVybiB0eXBlcyBvZiB0aGUgYHNldGAgYW5kIGB1cGRhdGVgIG1ldGhvZHMgb2YgdGhlIHNpZ25hbC5cbiAqIFdlIG5lZWQgdG8gcmUtdHlwZSB0aGUgV3JpdGFibGVTaWduYWwsIHNvIHRoYXQgdGhlIHNldCBhbmQgdXBkYXRlIG1ldGhvZHMgY2FuIGhhdmUgbnVsbCBpbiB0aGUgY2FsbCBzaWduYXR1cmUuXG4gKiBCdXQgdGhlIFdyaXRhYmxlU2lnbmFsIGl0c2VsZiB3b24ndCBoYXZlIG51bGwgaW4gdGhlIGNhbGwgc2lnbmF0dXJlLCBzbyB3ZSBuZWVkIHRvIHJlLXR5cGUgaXQuXG4gKiBUaGlzIGlzIG5lZWRlZCBpbiBvcmRlciB0byBiZSBhYmxlIHRvIHJlc2V0IHRoZSB2YWx1ZSB0byBudWxsLFxuICogd2hpY2ggaXMgbm90IHBvc3NpYmxlIHdpdGggdGhlIFdyaXRhYmxlU2lnbmFsIHRoYXQgZG9lc24ndCBoYXZlIG51bGwgaW4gaXQncyB0eXBlLlxuICovXG50eXBlIFNpZ25hbFNldEZuPFQ+ID0gKHZhbHVlOiBUKSA9PiB2b2lkO1xudHlwZSBTaWduYWxVcGRhdGVGbjxUPiA9IChmbjogKHZhbHVlOiBUKSA9PiBUKSA9PiB2b2lkO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzaWduYWwgdGhhdCBpcyBsaW5rZWQgdG8gYSBxdWVyeSBwYXJhbWV0ZXIuXG4gKlxuICogWW91IGNhbiBwYXJzZSB0aGUgcXVlcnkgcGFyYW0gdmFsdWUgYmVmb3JlIGl0IGlzIHBhc3NlZCB0byB0aGUgc2lnbmFsLCB0aGlzIHdheSB5b3UgY2FuIHRyYW5zZm9ybSB0aGUgdmFsdWUgZnJvbSBhIHN0cmluZyB0byBhIG51bWJlciBvciBib29sZWFuIG9yIHdoYXRldmVyIHlvdSBuZWVkLlxuICogWW91IGNhbiBhbHNvIHN0cmluZ2lmeSB0aGUgdmFsdWUgYmVmb3JlIGl0IGlzIHBhc3NlZCB0byB0aGUgcXVlcnkgcGFyYW0sIHRoaXMgd2F5IHlvdSBjYW4gc3RyaW5naWZ5IHRoZSB2YWx1ZSBmcm9tIGEgbnVtYmVyIG9yIGJvb2xlYW4gb3Igb2JqZWN0IHRvIGEgc3RyaW5nIG9yIG51bGwuXG4gKlxuICogWW91IGNhbiBhbHNvIHVzZSB0aGUgYGRlZmF1bHRWYWx1ZWAgb3B0aW9uIHRvIHNldCBhIGRlZmF1bHQgdmFsdWUgaWYgdGhlIHF1ZXJ5IHBhcmFtIGlzIG5vdCBwcmVzZW50IGluIHRoZSB1cmwgKG51bGwgb3IgdW5kZWZpbmVkKS5cbiAqIE5PVEU6IFlvdSBjYW5ub3QgdXNlIGJvdGggYGRlZmF1bHRWYWx1ZWAgYW5kIGBwYXJzZWAgYXQgdGhlIHNhbWUgdGltZS4gWW91IHNob3VsZCB1c2UgYHBhcnNlYCBpbnN0ZWFkIHRvIGhhbmRsZSB0aGUgZGVmYXVsdCB2YWx1ZS5cbiAqXG4gKiBZb3UgY2FuIHNldCB0aGUgc2lnbmFsIHRvIHVwZGF0ZSB0aGUgcXVlcnkgcGFyYW1ldGVyIGJ5IGNhbGxpbmcgdGhlIGBzZXRgIG9yIGB1cGRhdGVgIG1ldGhvZC5cbiAqIEJvdGggbWV0aG9kcyB3aWxsIGFjY2VwdCB0aGUgdmFsdWUgKyBudWxsIGFzIGEgdmFsaWQgdmFsdWUsIHNvIHlvdSBjYW4gcmVtb3ZlIHRoZSBxdWVyeSBwYXJhbWV0ZXIgYnkgcGFzc2luZyBudWxsIGlmIG5lZWRlZC5cbiAqXG4gKiBUaGUgJ3NldCcgYW5kICd1cGRhdGUnIG1ldGhvZHMgd2lsbCB1cGRhdGUgdGhlIHZhbHVlIHN5bmNocm9ub3VzbHksIGJ1dCB3aWxsIHNjaGVkdWxlIHRoZSBuYXZpZ2F0aW9uIGV2ZW50IHRvXG4gKiBoYXBwZW4gb24gdGhlIG5leHQgdGljayAodXNpbmcgcm9vdCBlZmZlY3Qgc2NoZWR1bGluZykuIFRoaXMgbWVhbnMgdGhlIHF1ZXJ5IHBhcmFtcyB3aWxsIGJlIHVwZGF0ZWQgYXN5bmNocm9ub3VzbHkuXG4gKiBUaGUgY2hhbmdlcyB3aWxsIGJlIGNvYWxlc2NlZCBpbnRvIGEgc2luZ2xlIG5hdmlnYXRpb24gZXZlbnQuIFRoaXMgbWVhbnMgdGhhdCBpZiB5b3UgY2FsbCBgc2V0YCBvciBgdXBkYXRlYCBtdWx0aXBsZSB0aW1lc1xuICogaW4gYSByb3cgKHN5bmNocm9ub3VzbHkpLCBvbmx5IHRoZSBsYXN0IHZhbHVlIHdpbGwgYmUgdXBkYXRlZCBpbiB0aGUgcXVlcnkgcGFyYW1zLlxuICpcbiAqIElmIHlvdSBoYXZlIG11bHRpcGxlIHNpZ25hbHMgbGlzdGVuaW5nIHRvIHRoZSBzYW1lIHF1ZXJ5IHBhcmFtZXRlciwgdGhleSB3aWxsIGFsbCBiZSB1cGRhdGVkIHdoZW4gdGhlIG5hdmlnYXRpb24gZXZlbnQgaGFwcGVucy5cbiAqXG4gKiBAcGFyYW0ga2V5IFRoZSBuYW1lIG9mIHRoZSBxdWVyeSBwYXJhbWV0ZXIuXG4gKiBAcGFyYW0gb3B0aW9ucyBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBzaWduYWwuXG4gKiBAcmV0dXJucyBBIHNpZ25hbCB0aGF0IGlzIGxpbmtlZCB0byB0aGUgcXVlcnkgcGFyYW1ldGVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbGlua2VkUXVlcnlQYXJhbTxUID0gc3RyaW5nPihcblx0a2V5OiBzdHJpbmcsXG5cdG9wdGlvbnM6IExpbmtlZFF1ZXJ5UGFyYW1PcHRpb25zICYge1xuXHRcdHBhcnNlOiBQYXJzZUZuPFQ+O1xuXHRcdHN0cmluZ2lmeTogU3RyaW5naWZ5Rm48VD47XG5cdH0sXG4pOiBXcml0YWJsZVNpZ25hbDxUPiAmIHtcblx0c2V0OiBTaWduYWxTZXRGbjxUIHwgbnVsbD47XG5cdHVwZGF0ZTogU2lnbmFsVXBkYXRlRm48VCB8IG51bGw+O1xufTtcblxuLyoqXG4gKiBZb3UgY2Fubm90IHVzZSBib3RoIGBkZWZhdWx0VmFsdWVgIGFuZCBgcGFyc2VgIGF0IHRoZSBzYW1lIHRpbWUuXG4gKiBZb3Ugc2hvdWxkIHVzZSBgcGFyc2VgIGluc3RlYWQgdG8gaGFuZGxlIHRoZSBkZWZhdWx0IHZhbHVlLlxuICpcbiAqIEZvciBleGFtcGxlLCB5b3UgY2Fubm90IGRvIHRoaXM6XG4gKlxuICogYGBgdHNcbiAqIGxpbmtlZFF1ZXJ5UGFyYW0oJ3BhcmFtJywgeyBkZWZhdWx0VmFsdWU6IDEsIHBhcnNlOiAoeCkgPT4geCA/IHBhcnNlSW50KHgsIDEwKSA6IHggfSk7XG4gKiBgYGBcbiAqXG4gKiBJbnN0ZWFkLCB5b3Ugc2hvdWxkIGRvIHRoaXM6XG4gKlxuICogYGBgdHNcbiAqIGxpbmtlZFF1ZXJ5UGFyYW0oJ3BhcmFtJywgeyBwYXJzZTogKHgpID0+IHggPyBwYXJzZUludCh4LCAxMCkgOiAxIH0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsaW5rZWRRdWVyeVBhcmFtPFQgPSBzdHJpbmc+KFxuXHRrZXk6IHN0cmluZyxcblx0b3B0aW9uczogTGlua2VkUXVlcnlQYXJhbU9wdGlvbnMgJiB7XG5cdFx0ZGVmYXVsdFZhbHVlOiBFeGNsdWRlPFQsIHVuZGVmaW5lZD47XG5cdFx0cGFyc2U6IFBhcnNlRm48VD47XG5cdFx0c3RyaW5naWZ5PzogU3RyaW5naWZ5Rm48VD47XG5cdH0sXG4pOiBuZXZlcjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxpbmtlZFF1ZXJ5UGFyYW08VCA9IHN0cmluZz4oXG5cdGtleTogc3RyaW5nLFxuXHRvcHRpb25zOiBMaW5rZWRRdWVyeVBhcmFtT3B0aW9ucyAmIHtcblx0XHRkZWZhdWx0VmFsdWU6IFQ7XG5cdFx0c3RyaW5naWZ5OiBTdHJpbmdpZnlGbjxUPjtcblx0fSxcbik6IFdyaXRhYmxlU2lnbmFsPFQgfCBudWxsPjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxpbmtlZFF1ZXJ5UGFyYW08VD4oXG5cdGtleTogc3RyaW5nLFxuXHRvcHRpb25zOiBMaW5rZWRRdWVyeVBhcmFtT3B0aW9ucyAmIHsgZGVmYXVsdFZhbHVlOiBUIH0sXG4pOiBXcml0YWJsZVNpZ25hbDxUPiAmIHtcblx0c2V0OiBTaWduYWxTZXRGbjxUIHwgbnVsbD47XG5cdHVwZGF0ZTogU2lnbmFsVXBkYXRlRm48VCB8IG51bGw+O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGxpbmtlZFF1ZXJ5UGFyYW08VD4oXG5cdGtleTogc3RyaW5nLFxuXHRvcHRpb25zOiBMaW5rZWRRdWVyeVBhcmFtT3B0aW9ucyAmIHsgZGVmYXVsdFZhbHVlOiBUIHwgbnVsbCB9LFxuKTogV3JpdGFibGVTaWduYWw8VCB8IG51bGw+O1xuXG5leHBvcnQgZnVuY3Rpb24gbGlua2VkUXVlcnlQYXJhbTxUPihcblx0a2V5OiBzdHJpbmcsXG5cdG9wdGlvbnM6IExpbmtlZFF1ZXJ5UGFyYW1PcHRpb25zICYgeyBkZWZhdWx0VmFsdWU6IFQgfCB1bmRlZmluZWQgfSxcbik6IFdyaXRhYmxlU2lnbmFsPFQgfCB1bmRlZmluZWQ+O1xuXG5leHBvcnQgZnVuY3Rpb24gbGlua2VkUXVlcnlQYXJhbTxUID0gc3RyaW5nPihcblx0a2V5OiBzdHJpbmcsXG5cdG9wdGlvbnM6IExpbmtlZFF1ZXJ5UGFyYW1PcHRpb25zICYgeyBkZWZhdWx0VmFsdWU6IHVuZGVmaW5lZCB9LFxuKTogV3JpdGFibGVTaWduYWw8VCB8IG51bGw+O1xuXG5leHBvcnQgZnVuY3Rpb24gbGlua2VkUXVlcnlQYXJhbTxUPihcblx0a2V5OiBzdHJpbmcsXG5cdG9wdGlvbnM6IExpbmtlZFF1ZXJ5UGFyYW1PcHRpb25zICYgeyBwYXJzZTogUGFyc2VGbjxUPiB9LFxuKTogV3JpdGFibGVTaWduYWw8VD4gJiB7XG5cdHNldDogU2lnbmFsU2V0Rm48VCB8IG51bGw+O1xuXHR1cGRhdGU6IFNpZ25hbFVwZGF0ZUZuPFQgfCBudWxsPjtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5rZWRRdWVyeVBhcmFtPFQgPSBzdHJpbmc+KFxuXHRrZXk6IHN0cmluZyxcblx0b3B0aW9uczogTGlua2VkUXVlcnlQYXJhbU9wdGlvbnMgJiB7IHN0cmluZ2lmeTogU3RyaW5naWZ5Rm48VD4gfSxcbik6IFdyaXRhYmxlU2lnbmFsPFQgfCBudWxsPjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxpbmtlZFF1ZXJ5UGFyYW08VCA9IHN0cmluZz4oXG5cdGtleTogc3RyaW5nLFxuXHRvcHRpb25zOiBMaW5rZWRRdWVyeVBhcmFtT3B0aW9ucyxcbik6IFdyaXRhYmxlU2lnbmFsPFQgfCBudWxsPjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxpbmtlZFF1ZXJ5UGFyYW08VCA9IHN0cmluZz4oXG5cdGtleTogc3RyaW5nLFxuKTogV3JpdGFibGVTaWduYWw8VCB8IG51bGw+O1xuXG5leHBvcnQgZnVuY3Rpb24gbGlua2VkUXVlcnlQYXJhbTxUPihcblx0a2V5OiBzdHJpbmcsXG5cdG9wdGlvbnM/OiBMaW5rZWRRdWVyeVBhcmFtT3B0aW9ucyAmIHtcblx0XHRkZWZhdWx0VmFsdWU/OiBUO1xuXHRcdHBhcnNlPzogUGFyc2VGbjxUPjtcblx0XHRzdHJpbmdpZnk/OiBTdHJpbmdpZnlGbjxUPjtcblx0fSxcbik6IFdyaXRhYmxlU2lnbmFsPFQ+IHtcblx0aWYgKG9wdGlvbnM/LmRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnM/LnBhcnNlKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0J2xpbmtlZFF1ZXJ5UGFyYW06IFlvdSBjYW5ub3QgaGF2ZSBib3RoIGRlZmF1bHRWYWx1ZSBhbmQgcGFyc2UgYXQgdGhlIHNhbWUgdGltZSEnLFxuXHRcdCk7XG5cdH1cblxuXHRjb25zdCBpbmplY3RvciA9IGFzc2VydEluamVjdG9yKGxpbmtlZFF1ZXJ5UGFyYW0sIG9wdGlvbnM/LmluamVjdG9yKTtcblxuXHRyZXR1cm4gcnVuSW5JbmplY3Rpb25Db250ZXh0KGluamVjdG9yLCAoKSA9PiB7XG5cdFx0Y29uc3Qgcm91dGUgPSBpbmplY3QoQWN0aXZhdGVkUm91dGUpO1xuXHRcdGNvbnN0IGdsb2JhbEhhbmRsZXIgPSBpbmplY3QoTGlua2VkUXVlcnlQYXJhbUdsb2JhbEhhbmRsZXIpO1xuXG5cdFx0LyoqXG5cdFx0ICogUGFyc2VzIGEgcGFyYW1ldGVyIHZhbHVlIGJhc2VkIG9uIHByb3ZpZGVkIGNvbmZpZ3VyYXRpb24uXG5cdFx0ICogQHBhcmFtIHBhcmFtcyAtIEFuIG9iamVjdCBjb250YWluaW5nIHBhcmFtZXRlcnMuXG5cdFx0ICogQHJldHVybnMgVGhlIHBhcnNlZCBwYXJhbWV0ZXIgdmFsdWUuXG5cdFx0ICovXG5cdFx0Y29uc3QgcGFyc2VQYXJhbVZhbHVlID0gKHBhcmFtczogUGFyYW1zKSA9PiB7XG5cdFx0XHQvLyBHZXQgdGhlIHZhbHVlIGZyb20gdGhlIHBhcmFtcyBvYmplY3QuXG5cdFx0XHRjb25zdCB2YWx1ZTogc3RyaW5nIHwgbnVsbCA9IHBhcmFtc1trZXldID8/IG51bGw7XG5cdFx0XHQvLyBJZiBhIHBhcnNpbmcgZnVuY3Rpb24gaXMgcHJvdmlkZWQgaW4gdGhlIGNvbmZpZywgdXNlIGl0IHRvIHBhcnNlIHRoZSB2YWx1ZS5cblx0XHRcdGlmIChvcHRpb25zPy5wYXJzZSkge1xuXHRcdFx0XHRyZXR1cm4gb3B0aW9ucy5wYXJzZSh2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0XHQvLyBJZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkIG9yIG51bGwgYW5kIGEgZGVmYXVsdCB2YWx1ZSBpcyBwcm92aWRlZCwgcmV0dXJuIHRoZSBkZWZhdWx0IHZhbHVlLlxuXHRcdFx0aWYgKFxuXHRcdFx0XHQodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkgJiZcblx0XHRcdFx0b3B0aW9ucz8uZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWRcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm4gb3B0aW9ucy5kZWZhdWx0VmFsdWU7XG5cdFx0XHR9XG5cdFx0XHQvLyBPdGhlcndpc2UsIHJldHVybiB0aGUgb3JpZ2luYWwgdmFsdWUgb3IgdGhlIHBhcnNlZCB2YWx1ZSAoaWYgaXQgd2FzIHBhcnNlZCkuXG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fTtcblxuXHRcdC8vIGNyZWF0ZSBhIHNpZ25hbCB0aGF0IGlzIHVwZGF0ZWQgd2hlbmV2ZXIgdGhlIHF1ZXJ5IHBhcmFtIGNoYW5nZXNcblx0XHRjb25zdCBxdWVyeVBhcmFtVmFsdWUgPSB0b1NpZ25hbChcblx0XHRcdHJvdXRlLnF1ZXJ5UGFyYW1zLnBpcGUoXG5cdFx0XHRcdGRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkKGtleSksIC8vIHNraXAgaWYgbm8gY2hhbmdlcyBvbiBzYW1lIGtleVxuXHRcdFx0XHRtYXAoKHgpID0+IHBhcnNlUGFyYW1WYWx1ZSh4KSksXG5cdFx0XHQpLFxuXHRcdFx0eyBpbml0aWFsVmFsdWU6IHBhcnNlUGFyYW1WYWx1ZShyb3V0ZS5zbmFwc2hvdC5xdWVyeVBhcmFtcykgfSxcblx0XHQpO1xuXG5cdFx0Y29uc3Qgc291cmNlID0gc2lnbmFsPFQ+KHF1ZXJ5UGFyYW1WYWx1ZSgpIGFzIFQpO1xuXG5cdFx0Y29uc3Qgb3JpZ2luYWxTZXQgPSBzb3VyY2Uuc2V0O1xuXG5cdFx0ZWZmZWN0KCgpID0+IHtcblx0XHRcdGNvbnN0IHggPSBxdWVyeVBhcmFtVmFsdWUoKTtcblx0XHRcdC8vIHVwZGF0ZSB0aGUgc291cmNlIHNpZ25hbCB3aGVuZXZlciB0aGUgcXVlcnkgcGFyYW0gY2hhbmdlc1xuXHRcdFx0dW50cmFja2VkKCgpID0+IG9yaWdpbmFsU2V0KHggYXMgVCkpO1xuXHRcdH0pO1xuXG5cdFx0Y29uc3Qgc2V0ID0gKHZhbHVlOiBUKSA9PiB7XG5cdFx0XHQvLyB3ZSBmaXJzdCBzZXQgdGhlIGluaXRpYWwgdmFsdWUgc28gaXQgc3luY2hyb25vdXMgKHNhbWUgYXMgYSBub3JtYWwgc2lnbmFsKVxuXHRcdFx0b3JpZ2luYWxTZXQodmFsdWUpO1xuXG5cdFx0XHQvLyB3aGVuIHRoZSBzb3VyY2Ugc2lnbmFsIGNoYW5nZXMsIHVwZGF0ZSB0aGUgcXVlcnkgcGFyYW1cblx0XHRcdC8vIHN0b3JlIHRoZSBuZXcgdmFsdWUgaW4gdGhlIGN1cnJlbnQga2V5cyBzbyB0aGF0IHdlIGNhbiBjb2FsZXNjZSB0aGUgbmF2aWdhdGlvblxuXHRcdFx0bGV0IHZhbHVlVG9CZVNldDogYW55ID0gdmFsdWU7XG5cdFx0XHRpZiAob3B0aW9ucz8uc3RyaW5naWZ5KSB7XG5cdFx0XHRcdHZhbHVlVG9CZVNldCA9IG9wdGlvbnMuc3RyaW5naWZ5KHZhbHVlKTtcblx0XHRcdH0gZWxzZSBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuXHRcdFx0XHR2YWx1ZVRvQmVTZXQgPSBudWxsO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsdWVUb0JlU2V0ID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHZhbHVlIDogU3RyaW5nKHZhbHVlKTtcblx0XHRcdH1cblxuXHRcdFx0Z2xvYmFsSGFuZGxlci5zZXRQYXJhbUtleVZhbHVlKGtleSwgdmFsdWVUb0JlU2V0KTtcblx0XHRcdGdsb2JhbEhhbmRsZXIuc2V0Q3VycmVudE5hdmlnYXRpb25FeHRyYXMob3B0aW9ucyA/PyB7fSk7XG5cblx0XHRcdC8vIHNjaGVkdWxlIHRoZSBuYXZpZ2F0aW9uIGV2ZW50IChtdWx0aXBsZSBzeW5jaHJvbm91cyBuYXZpZ2F0aW9ucyB3aWxsIGJlIGNvYWxlc2NlZClcblx0XHRcdC8vIHRoaXMgd2lsbCBhbHNvIHJlc2V0IHRoZSBjdXJyZW50IGtleXMgYW5kIG5hdmlnYXRpb24gZXh0cmFzIGFmdGVyIHRoZSBuYXZpZ2F0aW9uXG5cdFx0XHRnbG9iYWxIYW5kbGVyLnNjaGVkdWxlTmF2aWdhdGlvbigpO1xuXHRcdH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSAoZm46ICh2YWx1ZTogVCkgPT4gVCkgPT4gc2V0KGZuKHNvdXJjZSgpKSk7XG5cblx0XHRyZXR1cm4gT2JqZWN0LmFzc2lnbihzb3VyY2UsIHsgc2V0LCB1cGRhdGUgfSk7XG5cdH0pO1xufVxuXG4vKipcbiAqIENhbiBiZSB1c2VkIHRvIHBhcnNlIGEgcXVlcnkgcGFyYW0gdmFsdWUgdG8gYSBudW1iZXIuXG4gKiBZb3UgY2FuIGFsc28gdXNlIHRoZSBgZGVmYXVsdFZhbHVlYCBvcHRpb24gdG8gc2V0IGEgZGVmYXVsdCB2YWx1ZSBpZiB0aGUgcXVlcnkgcGFyYW0gaXMgbm90IHByZXNlbnQgaW4gdGhlIHVybCAobnVsbCBvciB1bmRlZmluZWQpLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGB0c1xuICogbGlua2VkUXVlcnlQYXJhbSgncGFnZScsIHsgcGFyc2U6IHBhcmFtVG9OdW1iZXIoKSB9KTtcbiAqIGBgYFxuICogV2lsbCByZXR1cm4gbnVsbCBpZiB0aGUgcXVlcnkgcGFyYW0gaXMgbm90IHByZXNlbnQgaW4gdGhlIHVybC5cbiAqXG4gKiBPciB3aXRoIGEgZGVmYXVsdCB2YWx1ZTpcbiAqIGBgYHRzXG4gKiBsaW5rZWRRdWVyeVBhcmFtKCdwYWdlJywgeyBwYXJzZTogcGFyYW1Ub051bWJlcih7ZGVmYXVsdFZhbHVlOiAxfSkgfSk7XG4gKiBgYGBcbiAqXG4gKiBXaWxsIHJldHVybiAxIGlmIHRoZSBxdWVyeSBwYXJhbSBpcyBub3QgcHJlc2VudCBpbiB0aGUgdXJsLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyYW1Ub051bWJlcigpOiAoeDogc3RyaW5nIHwgbnVsbCkgPT4gbnVtYmVyIHwgbnVsbDtcbmV4cG9ydCBmdW5jdGlvbiBwYXJhbVRvTnVtYmVyKGNvbmZpZzoge1xuXHRkZWZhdWx0VmFsdWU6IG51bWJlcjtcbn0pOiAoeDogc3RyaW5nIHwgbnVsbCkgPT4gbnVtYmVyO1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyYW1Ub051bWJlcihcblx0Y29uZmlnOiB7IGRlZmF1bHRWYWx1ZT86IG51bWJlciB8IG51bGwgfCB1bmRlZmluZWQgfSA9IHsgZGVmYXVsdFZhbHVlOiBudWxsIH0sXG4pIHtcblx0cmV0dXJuICh4OiBzdHJpbmcgfCBudWxsKSA9PiB7XG5cdFx0aWYgKHggPT09IHVuZGVmaW5lZCB8fCB4ID09PSBudWxsKSByZXR1cm4gY29uZmlnLmRlZmF1bHRWYWx1ZTtcblx0XHRjb25zdCBwYXJzZWQgPSBwYXJzZUludCh4LCAxMCk7XG5cdFx0aWYgKE51bWJlci5pc05hTihwYXJzZWQpKSByZXR1cm4gY29uZmlnLmRlZmF1bHRWYWx1ZTtcblx0XHRyZXR1cm4gcGFyc2VkO1xuXHR9O1xufVxuXG4vKipcbiAqIENhbiBiZSB1c2VkIHRvIHBhcnNlIGEgcXVlcnkgcGFyYW0gdmFsdWUgdG8gYSBib29sZWFuLlxuICogWW91IGNhbiBhbHNvIHVzZSB0aGUgYGRlZmF1bHRWYWx1ZWAgb3B0aW9uIHRvIHNldCBhIGRlZmF1bHQgdmFsdWUgaWYgdGhlIHF1ZXJ5IHBhcmFtIGlzIG5vdCBwcmVzZW50IGluIHRoZSB1cmwgKG51bGwgb3IgdW5kZWZpbmVkKS5cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgdHNcbiAqIGxpbmtlZFF1ZXJ5UGFyYW0oJ3Nob3dIaWRkZW4nLCB7IHBhcnNlOiBwYXJhbVRvQm9vbGVhbigpIH0pO1xuICogYGBgXG4gKiBXaWxsIHJldHVybiBudWxsIGlmIHRoZSBxdWVyeSBwYXJhbSBpcyBub3QgcHJlc2VudCBpbiB0aGUgdXJsIG9yIHRydWUvZmFsc2UgaWYgdGhlIHF1ZXJ5IHBhcmFtIGlzIHByZXNlbnQuXG4gKlxuICogT3Igd2l0aCBhIGRlZmF1bHQgdmFsdWU6XG4gKiBgYGB0c1xuICogbGlua2VkUXVlcnlQYXJhbSgnc2hvd0hpZGRlbicsIHsgcGFyc2U6IHBhcmFtVG9Cb29sZWFuKHtkZWZhdWx0VmFsdWU6IHRydWV9KSB9KTtcbiAqIGBgYFxuICpcbiAqIFdpbGwgcmV0dXJuIHRydWUgaWYgdGhlIHF1ZXJ5IHBhcmFtIGlzIG5vdCBwcmVzZW50IGluIHRoZSB1cmwuXG4gKiBPdGhlcndpc2UsIGl0IHdpbGwgcmV0dXJuIHdoYXRldmVyIHRoZSBxdWVyeSBwYXJhbSB2YWx1ZSBpcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcmFtVG9Cb29sZWFuKCk6ICh4OiBzdHJpbmcgfCBudWxsKSA9PiBib29sZWFuIHwgbnVsbDtcbmV4cG9ydCBmdW5jdGlvbiBwYXJhbVRvQm9vbGVhbihjb25maWc6IHtcblx0ZGVmYXVsdFZhbHVlOiBib29sZWFuO1xufSk6ICh4OiBzdHJpbmcgfCBudWxsKSA9PiBib29sZWFuO1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyYW1Ub0Jvb2xlYW4oXG5cdGNvbmZpZzogeyBkZWZhdWx0VmFsdWU/OiBib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZCB9ID0ge1xuXHRcdGRlZmF1bHRWYWx1ZTogbnVsbCxcblx0fSxcbikge1xuXHRyZXR1cm4gKHg6IHN0cmluZyB8IG51bGwpID0+XG5cdFx0eCA9PT0gdW5kZWZpbmVkIHx8IHggPT09IG51bGwgPyBjb25maWcuZGVmYXVsdFZhbHVlIDogeCA9PT0gJ3RydWUnO1xufVxuIl19