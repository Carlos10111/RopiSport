package com.ropisport.gestion.controller;

import com.ropisport.gestion.model.dto.request.SociaRequest;
import com.ropisport.gestion.model.dto.response.ApiResponse;
import com.ropisport.gestion.model.dto.response.PaginatedResponse;
import com.ropisport.gestion.model.dto.response.SociaResponse;
import com.ropisport.gestion.service.SociaService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;

@RestController
@RequestMapping("/api/socias")
@RequiredArgsConstructor
@CrossOrigin(origins = "*")
public class SociaController {
    
    private final SociaService sociaService;
    
    @PostMapping
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<SociaResponse> createSocia(@Valid @RequestBody SociaRequest request) {
        SociaResponse response = sociaService.createSocia(request);
        return new ResponseEntity<>(response, HttpStatus.CREATED);
    }
    
    @GetMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN') or hasRole('TESORERO') or hasRole('USUARIO')")
    public ResponseEntity<SociaResponse> getSociaById(@PathVariable Integer id) {
        SociaResponse response = sociaService.getSociaById(id);
        return ResponseEntity.ok(response);
    }
    
    @GetMapping
    @PreAuthorize("hasRole('ADMIN') or hasRole('TESORERO')")
    public ResponseEntity<List<SociaResponse>> getAllSocias() {
        List<SociaResponse> response = sociaService.getAllSocias();
        return ResponseEntity.ok(response);
    }
    
    @GetMapping("/paginated")
    @PreAuthorize("hasRole('ADMIN') or hasRole('TESORERO')")
    public ResponseEntity<PaginatedResponse<SociaResponse>> getAllSociasPaginated(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(defaultValue = "id") String sortBy,
            @RequestParam(defaultValue = "asc") String sortDir,
            @RequestParam(required = false) String filter) {
        PaginatedResponse<SociaResponse> response = sociaService.getAllSociasPaginated(page, size, sortBy, sortDir, filter);
        return ResponseEntity.ok(response);
    }
    
    @GetMapping("/buscar")
    @PreAuthorize("hasRole('ADMIN') or hasRole('TESORERO')")
    public ResponseEntity<List<SociaResponse>> searchSocias(
            @RequestParam(required = false) String numeroSocia,
            @RequestParam(required = false) String nombre,
            @RequestParam(required = false) String apellidos,
            @RequestParam(required = false) String nombreNegocio,
            @RequestParam(required = false) Boolean activa) {
        List<SociaResponse> response = sociaService.searchSocias(numeroSocia, nombre, apellidos, nombreNegocio, activa);
        return ResponseEntity.ok(response);
    }
    
    @PutMapping("/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<SociaResponse> updateSocia(
            @PathVariable Integer id,
            @Valid @RequestBody SociaRequest request) {
        SociaResponse response = sociaService.updateSocia(id, request);
        return ResponseEntity.ok(response);
    }
    
    @DeleteMapping("/{id}")
    public ResponseEntity<ApiResponse> deleteSocia(@PathVariable Integer id) {
        sociaService.deleteSocia(id);
        return ResponseEntity.ok(new ApiResponse(true, "Socia eliminada correctamente"));
    }
    
    @GetMapping("/usuario/{usuarioId}")
    @PreAuthorize("hasRole('ADMIN') or hasRole('USUARIO')")
    public ResponseEntity<SociaResponse> getSociaByUsuarioId(@PathVariable Integer usuarioId) {
        SociaResponse response = sociaService.getSociaByUsuarioId(usuarioId);
        return ResponseEntity.ok(response);
    }
    
    @PostMapping("/upload-excel")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<ApiResponse> uploadExcel(@RequestParam("file") MultipartFile file) {
        sociaService.importFromExcel(file);
        return ResponseEntity.ok(new ApiResponse(true, "Socias importadas correctamente"));
    }
    
    @GetMapping("/download-excel")
    @PreAuthorize("hasRole('ADMIN') or hasRole('TESORERO')")
    public ResponseEntity<Resource> downloadExcel() {
        Resource file = sociaService.exportToExcel();
        return ResponseEntity.ok()
                .contentType(MediaType.parseMediaType("application/vnd.ms-excel"))
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=socias.xlsx")
                .body(file);
    }
